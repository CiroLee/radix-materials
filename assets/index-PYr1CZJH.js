import{r as n,j as s}from"./index-DygmJ1BA.js";import{B as l,C as d,H as w}from"./index-D8JiO3IO.js";import{N as f,S as x,A as b}from"./index-DrMImJcd.js";import{P as t}from"./index-65gzy2T1.js";import{S as k}from"./index-msYrX7DJ.js";import"./index-Bnqxa-iX.js";import"./index-CAk4g69J.js";import"./index-B2PWRJWy.js";import"./index-30dsvhPB.js";const C=[{prop:"show",desc:"whether show popup",type:"boolean",required:!1,default:!1},{prop:"isBlur",desc:"whether mask is blur",type:"boolean",required:!1,default:!1},{prop:"maskClosable",desc:"whether click mask to close the popup",type:"boolean",required:!1,default:!1},{prop:"placement",desc:"content placement",type:"tag: top | bottom | left | right | center",required:!1,default:"bottom"},{prop:"children",type:"React.ReactNode",required:!1,default:"-"},{prop:"className",type:"string",required:!1,default:"-"},{prop:"style",type:"React.CSSProperties",required:!1,default:"-"},{prop:"onClose",desc:"popup close callback",type:"() => void",required:!0,default:"-"}],S=`<pre class="hljs"><code><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Switch</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;your path/Switch&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Popup</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;your path/Popup&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;your path/Button&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [showCenter, setShowCenter] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">const</span> [showLeft, setShowLeft] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">const</span> [showRight, setShowRight] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">const</span> [showTop, setShowTop] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">const</span> [showBottom, setShowBottom] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);

  <span class="hljs-keyword">const</span> [blur, setBlur] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-4&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mb-3 flex items-center&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>blur mask:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;ml-2&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">onCheckedChange</span>=<span class="hljs-string">{setBlur}</span> /&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;[&amp;_button:not(:first-child)]:ml-2&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowCenter(true)}&gt;center<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowLeft(true)}&gt;left<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowRight(true)}&gt;right<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowTop(true)}&gt;top<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowBottom(true)}&gt;bottom<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Popup</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">isBlur</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{showCenter}</span> <span class="hljs-attr">maskClosable</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowCenter(false)}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-[300px] h-[200px] bg-white p-6 rounded-md&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is center box content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Popup</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">isBlur</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{showLeft}</span> <span class="hljs-attr">maskClosable</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowLeft(false)}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-[300px] h-[100vh] bg-white p-4&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is left box content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Popup</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">isBlur</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{showRight}</span> <span class="hljs-attr">maskClosable</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowRight(false)}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-[300px] h-[100vh] bg-white p-4&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is right box content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Popup</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">isBlur</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{showTop}</span> <span class="hljs-attr">maskClosable</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowTop(false)}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-[100vw] h-[200px] bg-white p-4&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is top box content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">Popup</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">isBlur</span>=<span class="hljs-string">{blur}</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{showBottom}</span> <span class="hljs-attr">maskClosable</span> <span class="hljs-attr">onClose</span>=<span class="hljs-string">{()</span> =&gt;</span> setShowBottom(false)}&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-[100vw] h-[200px] bg-white p-4&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>this is bottom box content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}
</code></pre>
`;function L(){const[r,p]=n.useState(!1),[j,e]=n.useState(!1),[i,c]=n.useState(!1),[g,h]=n.useState(!1),[m,o]=n.useState(!1),[a,u]=n.useState(!1);return s.jsxs(s.Fragment,{children:[s.jsx(f,{title:"Popup",sourceName:"Popup"}),s.jsxs(x,{className:"my-4",children:[s.jsxs("p",{className:"mb-3 flex items-center",children:[s.jsx("span",{children:"blur mask:"}),s.jsx(k,{className:"ml-2",checked:a,onCheckedChange:u})]}),s.jsxs("div",{className:"[&_button:not(:first-child)]:ml-2",children:[s.jsx(l,{onClick:()=>p(!0),children:"center"}),s.jsx(l,{onClick:()=>e(!0),children:"left"}),s.jsx(l,{onClick:()=>c(!0),children:"right"}),s.jsx(l,{onClick:()=>h(!0),children:"top"}),s.jsx(l,{onClick:()=>o(!0),children:"bottom"})]}),s.jsx(t,{placement:"center",isBlur:a,show:r,maskClosable:!0,onClose:()=>p(!1),children:s.jsx("div",{className:"w-[300px] h-[200px] bg-white p-6 rounded-md",children:s.jsx("p",{children:"this is center box content"})})}),s.jsx(t,{placement:"left",isBlur:a,show:j,maskClosable:!0,onClose:()=>e(!1),children:s.jsx("div",{className:"w-[300px] h-[100vh] bg-white p-4",children:s.jsx("p",{children:"this is left box content"})})}),s.jsx(t,{placement:"right",isBlur:a,show:i,maskClosable:!0,onClose:()=>c(!1),children:s.jsx("div",{className:"w-[300px] h-[100vh] bg-white p-4",children:s.jsx("p",{children:"this is right box content"})})}),s.jsx(t,{placement:"top",isBlur:a,show:g,maskClosable:!0,onClose:()=>h(!1),children:s.jsx("div",{className:"w-[100vw] h-[200px] bg-white p-4",children:s.jsx("p",{children:"this is top box content"})})}),s.jsx(t,{placement:"bottom",isBlur:a,show:m,maskClosable:!0,onClose:()=>o(!1),children:s.jsx("div",{className:"w-[100vw] h-[200px] bg-white p-4",children:s.jsx("p",{children:"this is bottom box content"})})}),s.jsx(d,{content:S})]}),s.jsx(w,{as:"h2",className:"mb-2",children:"API"}),s.jsx(b,{rows:C})]})}export{L as default};
